{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCAA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAa,MAAM,IAAI,CAAC,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,EAC3C,EAAa,CAAC,EAEpB,EAAW,OAAO,CAAC,SAAC,CAAA,CAAM,CAA1B,EACE,CAAU,CAAC,EAAM,CAAG,KACtB,GAEA,IAAM,EAAY,SAAC,CAAA,CAAa,CAAhC,EACE,IAAM,EAAO,MAAM,IAAI,CAAC,EAAM,IAAI,EAElC,EAAK,IAAI,CAAC,SAAC,CAAA,CAAG,CAAd,EACE,IAAM,EAAS,EAAE,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GAC9C,EAAS,EAAE,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GAEpD,MAAO,AAAU,QAAV,EACH,EAAO,aAAa,CAAC,EAAQ,KAAM,CAAE,QAAS,CAAA,CAAK,GACnD,EAAO,aAAa,CAAC,EAAQ,KAAM,CAAE,QAAS,CAAA,CAAK,EACzD,GAEA,IAAM,EAAW,SAAS,sBAAsB,GAEhD,EAAK,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAS,WAAW,CAAC,E,GAC3C,EAAM,WAAW,CAAC,EACpB,EAEA,EAAW,OAAO,CAAC,SAAC,CAAA,CAAM,CAA1B,EACE,EAAK,gBAAgB,CAAC,QAAS,WAC7B,IAAM,EAAe,CAAU,CAAC,EAAM,CAEtC,EAAU,EAAO,GAEjB,CAAU,CAAC,EAAM,CAAG,AAAiB,QAAjB,EAAyB,OAAS,KACxD,EACF,GAEA,IAAM,EAAiB,SAAC,CAAxB,EACE,IAAM,EAAY,EAAM,aAAa,CAAC,WAElC,GACF,EAAU,SAAS,CAAC,MAAM,CAAC,UAE7B,EAAI,SAAS,CAAC,GAAG,CAAC,SACpB,EAEA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,IAAM,EAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAEzB,GAAO,CAAC,EAAI,SAAS,CAAC,QAAQ,CAAC,WACjC,EAAe,EAEnB,GAEA,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,CAAA,EAAK,SAAS,CAAG,oBAqBjB,AAnBmB,CACjB,CAAE,UAAW,OAAQ,KAAM,MAAO,EAClC,CAAE,UAAW,WAAY,KAAM,MAAO,EACtC,CACE,UAAW,SACX,KAAM,SACN,QAAS,CACP,QACA,YACA,SACA,WACA,YACA,gBACD,AACH,EACA,CAAE,UAAW,MAAO,KAAM,QAAS,EACnC,CAAE,UAAW,SAAU,KAAM,QAAS,EACvC,CAEU,OAAO,CAAC,SAAnB,CAAA,EAAsB,IAAA,EAAA,EAAA,SAAA,CAAW,EAAA,EAAA,IAAA,CAAM,EAAA,EAAA,OAAjB,CACd,EAAQ,SAAS,aAAa,CAAC,QAErC,CAAA,EAAM,WAAW,CAAI,GAAyD,MAAA,CAAvD,EAAU,MAAM,CAAC,GAAG,WAAW,GAAK,EAAU,KAAK,CAAC,GAAG,MAE9E,IAAM,EAAQ,SAAS,aAAa,CAClC,AAAS,WAAT,EAAoB,SAAW,QAGjC,CAAA,EAAM,IAAI,CAAG,EACb,EAAM,YAAY,CAAC,UAAW,GAE1B,AAAS,WAAT,EACF,EAAQ,OAAO,CAAC,SAAC,CADnB,EAC8B,OAAA,EAAM,GAAG,CAAC,IAAI,OAAO,G,GAEjD,EAAM,IAAI,CAAG,EAGf,EAAM,WAAW,CAAC,GAClB,EAAK,WAAW,CAAC,EACnB,GAEA,EAAK,WAAW,CACd,OAAO,MAAM,CAAC,SAAS,aAAa,CAAC,UAAW,CAC9C,KAAM,SACN,YAAa,eACf,IAGF,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,IAAM,EAAmB,SAAC,CAAA,CAAa,CAAvC,EACE,IAAM,EAAe,SAAS,aAAa,CAAC,MAE5C,CAAA,EAAa,SAAS,CAAG,gBAAqB,MAAA,CAAL,GACzC,EAAa,YAAY,CAAC,UAAW,gBAErC,EAAa,SAAS,CAAI,6BAEnB,MAAA,CADe,EAAK,oBACR,MAAA,CAAZ,EAAY,cAEnB,SAAS,IAAI,CAAC,MAAM,CAAC,GACrB,WAAW,WAAO,OAAA,EAAa,KAAK,CAAC,OAAO,CAAG,MAAS,EAAA,IAC1D,EAEM,EAAa,CACjB,KAAM,SAAC,CAAP,EACE,OAAA,EAAM,IAAI,GAAG,MAAM,EAAI,GAAK,yC,EAC9B,IAAK,SAAC,CAAN,EACE,MAAC,CAAC,MAAM,IAAU,GAAS,IAAM,GAAS,IAC1C,+B,EACF,SAAU,SAAC,CAAX,EAAqB,OAAA,EAAM,IAAI,GAAG,MAAM,CAAG,GAAK,0B,EAChD,OAAQ,SAAC,CAAT,EACE,IAAM,EAAS,WAAW,EAAM,OAAO,CAAC,QAAS,KAEjD,MACG,CAAC,MAAM,IAAW,GAAU,GAAM,kCAEvC,CACF,EAEM,EAAe,SAAC,CAAA,CAAW,CAAjC,EACE,GAAI,AAAc,WAAd,EACF,OAAO,KAGT,IAAM,EAAU,CAAU,CAAC,EAAU,CAAC,GAEtC,MAAO,AAAY,CAAA,IAAZ,EAAmB,KAAO,CAAE,KAAM,QAAS,QAAS,CAAQ,CACrE,EAEA,EAAK,gBAAgB,CAAC,SAAU,SAAC,CAAjC,EACE,EAAE,cAAc,GAEhB,IAAM,EAAW,IAAI,SAAS,GAEzB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAsB,EAAS,OAAO,EAAA,CAAA,OAAA,QAAA,CAAA,GAAtC,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA0C,CAA1C,I,EAAA,G,EAAA,EAAA,KAAA,C,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,EAAA,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,EAAA,G,E,EAAA,I,A,W,M,A,U,6I,KAAO,EAAA,CAAA,CAAA,EAAA,CAAK,EAAZ,CAAA,CAAA,EAAA,CACG,EAAkB,EAAa,EAAK,GAE1C,GAAI,EAAiB,CACnB,EAAiB,EAAgB,OAAO,CAAE,EAAgB,IAAI,EAE9D,MACF,CACF,C,C,M,E,CARK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAUL,IAAM,EAAS,SAAS,aAAa,CAAC,MAEtC,EAAS,OAAO,CAAC,SAAC,CAAA,CAAO,CAAzB,EACE,IAAM,EAAO,SAAS,aAAa,CAAC,KAEhC,AAAQ,CAAA,WAAR,EACF,EAAK,WAAW,CAAG,IAAM,OAAO,GAAO,cAAc,CAAC,SAEtD,EAAK,WAAW,CAAG,EAGrB,EAAO,WAAW,CAAC,EACrB,GAEA,EAAM,WAAW,CAAC,GAClB,EAAK,KAAK,GAEV,EAAiB,8BAA+B,UAClD,GAEA,EAAM,gBAAgB,CAAC,WAAY,SAAC,CAApC,EACE,IAAM,EAAO,EAAE,MAAM,CACf,EAAe,EAAK,WAAW,CAAC,IAAI,GAEpC,EAAQ,SAAS,aAAa,CAAC,QAErC,CAAA,EAAM,SAAS,CAAG,aAClB,EAAM,IAAI,CAAG,OACb,EAAM,KAAK,CAAG,EAEd,EAAK,WAAW,CAAG,GACnB,EAAK,WAAW,CAAC,GACjB,EAAM,KAAK,GAEX,EAAM,gBAAgB,CAAC,OAAQ,WAAM,OAAA,EAAY,EAAO,E,GAExD,EAAM,gBAAgB,CAAC,WAAY,SAAC,CAApC,EACsB,UAAhB,EAAQ,GAAG,EACb,EAAY,EAAO,EAEvB,EACF,GAEA,IAAM,EAAc,SAAC,CAAA,CAAO,CAA5B,EACE,IAAM,EAAW,EAAM,KAAK,CAAC,IAAI,IAAM,CAGvC,AAFa,CAAA,EAAM,aAAa,CAE3B,WAAW,CAAG,EACnB,EAAM,MAAM,EACd,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var thead = document.querySelector(\"thead\");\n    var tbody = document.querySelector(\"tbody\");\n    var theadCells = Array.from(thead.rows[0].cells);\n    var sortOrders = {};\n    theadCells.forEach(function(cell, index) {\n        sortOrders[index] = \"asc\";\n    });\n    var sortTable = function(columnIndex, order) {\n        var rows = Array.from(tbody.rows);\n        rows.sort(function(a, b) {\n            var valueA = a.cells[columnIndex].textContent.trim();\n            var valueB = b.cells[columnIndex].textContent.trim();\n            return order === \"asc\" ? valueA.localeCompare(valueB, \"en\", {\n                numeric: true\n            }) : valueB.localeCompare(valueA, \"en\", {\n                numeric: true\n            });\n        });\n        var fragment = document.createDocumentFragment();\n        rows.forEach(function(row) {\n            return fragment.appendChild(row);\n        });\n        tbody.appendChild(fragment);\n    };\n    theadCells.forEach(function(cell, index) {\n        cell.addEventListener(\"click\", function() {\n            var currentOrder = sortOrders[index];\n            sortTable(index, currentOrder);\n            sortOrders[index] = currentOrder === \"asc\" ? \"desc\" : \"asc\";\n        });\n    });\n    var setActiveClass = function(row) {\n        var activeRow = tbody.querySelector(\".active\");\n        if (activeRow) activeRow.classList.remove(\"active\");\n        row.classList.add(\"active\");\n    };\n    tbody.addEventListener(\"click\", function(e) {\n        var row = e.target.closest(\"tr\");\n        if (row && !row.classList.contains(\"active\")) setActiveClass(row);\n    });\n    var form = document.createElement(\"form\");\n    form.className = \"new-employee-form\";\n    var formInputs = [\n        {\n            inputName: \"name\",\n            type: \"text\"\n        },\n        {\n            inputName: \"position\",\n            type: \"text\"\n        },\n        {\n            inputName: \"office\",\n            type: \"select\",\n            options: [\n                \"Tokyo\",\n                \"Singapore\",\n                \"London\",\n                \"New York\",\n                \"Edinburgh\",\n                \"San Francisco\"\n            ]\n        },\n        {\n            inputName: \"age\",\n            type: \"number\"\n        },\n        {\n            inputName: \"salary\",\n            type: \"number\"\n        }\n    ];\n    formInputs.forEach(function(param) {\n        var inputName = param.inputName, type = param.type, options = param.options;\n        var label = document.createElement(\"label\");\n        label.textContent = \"\".concat(inputName.charAt(0).toUpperCase() + inputName.slice(1), \": \");\n        var input = document.createElement(type === \"select\" ? \"select\" : \"input\");\n        input.name = inputName;\n        input.setAttribute(\"data-qa\", inputName);\n        if (type === \"select\") options.forEach(function(option) {\n            return input.add(new Option(option));\n        });\n        else input.type = type;\n        label.appendChild(input);\n        form.appendChild(label);\n    });\n    form.appendChild(Object.assign(document.createElement(\"button\"), {\n        type: \"submit\",\n        textContent: \"Save to table\"\n    }));\n    document.body.appendChild(form);\n    var pushNotification = function(description, type) {\n        var notification = document.createElement(\"div\");\n        notification.className = \"notification \".concat(type);\n        notification.setAttribute(\"data-qa\", \"notification\");\n        notification.innerHTML = \"\\n      <h2 class='title'>\".concat(type, \"</h2>\\n      <p>\").concat(description, \"</p>\\n    \");\n        document.body.append(notification);\n        setTimeout(function() {\n            return notification.style.display = \"none\";\n        }, 2000);\n    };\n    var validators = {\n        name: function(value) {\n            return value.trim().length >= 4 || \"Name must be at least 4 characters long\";\n        },\n        age: function(value) {\n            return !isNaN(value) && value >= 18 && value <= 90 || \"Age must be between 18 and 90\";\n        },\n        position: function(value) {\n            return value.trim().length > 0 || \"Position cannot be empty\";\n        },\n        salary: function(value) {\n            var salary = parseFloat(value.replace(/[$,]/g, \"\"));\n            return !isNaN(salary) && salary >= 0 || \"Salary must be a positive number\";\n        }\n    };\n    var validateData = function(inputName, value) {\n        if (inputName === \"office\") return null;\n        var isValid = validators[inputName](value);\n        return isValid === true ? null : {\n            type: \"error\",\n            message: isValid\n        };\n    };\n    form.addEventListener(\"submit\", function(e) {\n        e.preventDefault();\n        var formData = new FormData(form);\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = formData.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], value = _step_value[1];\n                var validationError = validateData(key, value);\n                if (validationError) {\n                    pushNotification(validationError.message, validationError.type);\n                    return;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var newRow = document.createElement(\"tr\");\n        formData.forEach(function(value, key) {\n            var cell = document.createElement(\"td\");\n            if (key === \"salary\") cell.textContent = \"$\" + Number(value).toLocaleString(\"en-US\");\n            else cell.textContent = value;\n            newRow.appendChild(cell);\n        });\n        tbody.appendChild(newRow);\n        form.reset();\n        pushNotification(\"Employee added successfully\", \"success\");\n    });\n    tbody.addEventListener(\"dblclick\", function(e) {\n        var cell = e.target;\n        var initialValue = cell.textContent.trim();\n        var input = document.createElement(\"input\");\n        input.className = \"cell-input\";\n        input.type = \"text\";\n        input.value = initialValue;\n        cell.textContent = \"\";\n        cell.appendChild(input);\n        input.focus();\n        input.addEventListener(\"blur\", function() {\n            return saveChanges(input, initialValue);\n        });\n        input.addEventListener(\"keypress\", function(kpEvent) {\n            if (kpEvent.key === \"Enter\") saveChanges(input, initialValue);\n        });\n    });\n    var saveChanges = function(input, initialValue) {\n        var newValue = input.value.trim() || initialValue;\n        var cell = input.parentElement;\n        cell.textContent = newValue;\n        input.remove();\n    };\n});\n\n//# sourceMappingURL=index.85512c98.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n  const thead = document.querySelector('thead');\n  const tbody = document.querySelector('tbody');\n  const theadCells = Array.from(thead.rows[0].cells);\n  const sortOrders = {};\n\n  theadCells.forEach((cell, index) => {\n    sortOrders[index] = 'asc';\n  });\n\n  const sortTable = (columnIndex, order) => {\n    const rows = Array.from(tbody.rows);\n\n    rows.sort((a, b) => {\n      const valueA = a.cells[columnIndex].textContent.trim();\n      const valueB = b.cells[columnIndex].textContent.trim();\n\n      return order === 'asc'\n        ? valueA.localeCompare(valueB, 'en', { numeric: true })\n        : valueB.localeCompare(valueA, 'en', { numeric: true });\n    });\n\n    const fragment = document.createDocumentFragment();\n\n    rows.forEach((row) => fragment.appendChild(row));\n    tbody.appendChild(fragment);\n  };\n\n  theadCells.forEach((cell, index) => {\n    cell.addEventListener('click', () => {\n      const currentOrder = sortOrders[index];\n\n      sortTable(index, currentOrder);\n\n      sortOrders[index] = currentOrder === 'asc' ? 'desc' : 'asc';\n    });\n  });\n\n  const setActiveClass = (row) => {\n    const activeRow = tbody.querySelector('.active');\n\n    if (activeRow) {\n      activeRow.classList.remove('active');\n    }\n    row.classList.add('active');\n  };\n\n  tbody.addEventListener('click', (e) => {\n    const row = e.target.closest('tr');\n\n    if (row && !row.classList.contains('active')) {\n      setActiveClass(row);\n    }\n  });\n\n  const form = document.createElement('form');\n\n  form.className = 'new-employee-form';\n\n  const formInputs = [\n    { inputName: 'name', type: 'text' },\n    { inputName: 'position', type: 'text' },\n    {\n      inputName: 'office',\n      type: 'select',\n      options: [\n        'Tokyo',\n        'Singapore',\n        'London',\n        'New York',\n        'Edinburgh',\n        'San Francisco',\n      ],\n    },\n    { inputName: 'age', type: 'number' },\n    { inputName: 'salary', type: 'number' },\n  ];\n\n  formInputs.forEach(({ inputName, type, options }) => {\n    const label = document.createElement('label');\n\n    label.textContent = `${inputName.charAt(0).toUpperCase() + inputName.slice(1)}: `;\n\n    const input = document.createElement(\n      type === 'select' ? 'select' : 'input',\n    );\n\n    input.name = inputName;\n    input.setAttribute('data-qa', inputName);\n\n    if (type === 'select') {\n      options.forEach((option) => input.add(new Option(option)));\n    } else {\n      input.type = type;\n    }\n\n    label.appendChild(input);\n    form.appendChild(label);\n  });\n\n  form.appendChild(\n    Object.assign(document.createElement('button'), {\n      type: 'submit',\n      textContent: 'Save to table',\n    }),\n  );\n\n  document.body.appendChild(form);\n\n  const pushNotification = (description, type) => {\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    notification.setAttribute('data-qa', 'notification');\n\n    notification.innerHTML = `\n      <h2 class='title'>${type}</h2>\n      <p>${description}</p>\n    `;\n    document.body.append(notification);\n    setTimeout(() => (notification.style.display = 'none'), 2000);\n  };\n\n  const validators = {\n    name: (value) =>\n      value.trim().length >= 4 || 'Name must be at least 4 characters long',\n    age: (value) =>\n      (!isNaN(value) && value >= 18 && value <= 90) ||\n      'Age must be between 18 and 90',\n    position: (value) => value.trim().length > 0 || 'Position cannot be empty',\n    salary: (value) => {\n      const salary = parseFloat(value.replace(/[$,]/g, ''));\n\n      return (\n        (!isNaN(salary) && salary >= 0) || 'Salary must be a positive number'\n      );\n    },\n  };\n\n  const validateData = (inputName, value) => {\n    if (inputName === 'office') {\n      return null;\n    }\n\n    const isValid = validators[inputName](value);\n\n    return isValid === true ? null : { type: 'error', message: isValid };\n  };\n\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const formData = new FormData(form);\n\n    for (const [key, value] of formData.entries()) {\n      const validationError = validateData(key, value);\n\n      if (validationError) {\n        pushNotification(validationError.message, validationError.type);\n\n        return;\n      }\n    }\n\n    const newRow = document.createElement('tr');\n\n    formData.forEach((value, key) => {\n      const cell = document.createElement('td');\n\n      if (key === 'salary') {\n        cell.textContent = '$' + Number(value).toLocaleString('en-US');\n      } else {\n        cell.textContent = value;\n      }\n\n      newRow.appendChild(cell);\n    });\n\n    tbody.appendChild(newRow);\n    form.reset();\n\n    pushNotification('Employee added successfully', 'success');\n  });\n\n  tbody.addEventListener('dblclick', (e) => {\n    const cell = e.target;\n    const initialValue = cell.textContent.trim();\n\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    input.type = 'text';\n    input.value = initialValue;\n\n    cell.textContent = '';\n    cell.appendChild(input);\n    input.focus();\n\n    input.addEventListener('blur', () => saveChanges(input, initialValue));\n\n    input.addEventListener('keypress', (kpEvent) => {\n      if (kpEvent.key === 'Enter') {\n        saveChanges(input, initialValue);\n      }\n    });\n  });\n\n  const saveChanges = (input, initialValue) => {\n    const newValue = input.value.trim() || initialValue;\n    const cell = input.parentElement;\n\n    cell.textContent = newValue;\n    input.remove();\n  };\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","document","addEventListener","thead","querySelector","tbody","theadCells","from","rows","cells","sortOrders","forEach","cell","index","sortTable","columnIndex","order","sort","a","b","valueA","textContent","trim","valueB","localeCompare","numeric","fragment","createDocumentFragment","row","appendChild","currentOrder","setActiveClass","activeRow","classList","remove","add","e","target","closest","contains","form","createElement","className","formInputs","inputName","type","options","param","label","concat","charAt","toUpperCase","slice","input","name","setAttribute","option","Option","Object","assign","body","pushNotification","description","notification","innerHTML","append","setTimeout","style","display","validators","value","age","isNaN","position","salary","parseFloat","replace","validateData","isValid","message","preventDefault","formData","FormData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_step_value","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","call","push","err","_unsupported_iterable_to_array","o","minLen","n","prototype","toString","constructor","test","_non_iterable_rest","TypeError","key","validationError","return","newRow","Number","toLocaleString","reset","initialValue","focus","saveChanges","kpEvent","newValue","parentElement"],"version":3,"file":"index.85512c98.js.map"}