{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  const thead = document.querySelector('thead');\n  const tbody = document.querySelector('tbody');\n  const theadCells = Array.from(thead.rows[0].cells);\n  const sortOrders = {};\n\n  theadCells.forEach((cell, index) => {\n    sortOrders[index] = 'asc';\n  });\n\n  const sortTable = (columnIndex, order) => {\n    const rows = Array.from(tbody.rows);\n\n    rows.sort((a, b) => {\n      const valueA = a.cells[columnIndex].textContent.trim();\n      const valueB = b.cells[columnIndex].textContent.trim();\n\n      return order === 'asc'\n        ? valueA.localeCompare(valueB, 'en', { numeric: true })\n        : valueB.localeCompare(valueA, 'en', { numeric: true });\n    });\n\n    const fragment = document.createDocumentFragment();\n\n    rows.forEach((row) => fragment.appendChild(row));\n    tbody.appendChild(fragment);\n  };\n\n  theadCells.forEach((cell, index) => {\n    cell.addEventListener('click', () => {\n      const currentOrder = sortOrders[index];\n\n      sortTable(index, currentOrder);\n\n      sortOrders[index] = currentOrder === 'asc' ? 'desc' : 'asc';\n    });\n  });\n\n  const setActiveClass = (row) => {\n    const activeRow = tbody.querySelector('.active');\n\n    if (activeRow) {\n      activeRow.classList.remove('active');\n    }\n    row.classList.add('active');\n  };\n\n  tbody.addEventListener('click', (e) => {\n    const row = e.target.closest('tr');\n\n    if (row && !row.classList.contains('active')) {\n      setActiveClass(row);\n    }\n  });\n\n  const form = document.createElement('form');\n\n  form.className = 'new-employee-form';\n\n  const formInputs = [\n    { inputName: 'name', type: 'text' },\n    { inputName: 'position', type: 'text' },\n    {\n      inputName: 'office',\n      type: 'select',\n      options: [\n        'Tokyo',\n        'Singapore',\n        'London',\n        'New York',\n        'Edinburgh',\n        'San Francisco',\n      ],\n    },\n    { inputName: 'age', type: 'number' },\n    { inputName: 'salary', type: 'number' },\n  ];\n\n  formInputs.forEach(({ inputName, type, options }) => {\n    const label = document.createElement('label');\n\n    label.textContent = `${inputName.charAt(0).toUpperCase() + inputName.slice(1)}: `;\n\n    const input = document.createElement(\n      type === 'select' ? 'select' : 'input',\n    );\n\n    input.name = inputName;\n    input.setAttribute('data-qa', inputName);\n\n    if (type === 'select') {\n      options.forEach((option) => input.add(new Option(option)));\n    } else {\n      input.type = type;\n    }\n\n    label.appendChild(input);\n    form.appendChild(label);\n  });\n\n  form.appendChild(\n    Object.assign(document.createElement('button'), {\n      type: 'submit',\n      textContent: 'Save to table',\n    }),\n  );\n\n  document.body.appendChild(form);\n\n  const pushNotification = (description, type) => {\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    notification.setAttribute('data-qa', 'notification');\n\n    notification.innerHTML = `\n      <h2 class='title'>${type}</h2>\n      <p>${description}</p>\n    `;\n    document.body.append(notification);\n    setTimeout(() => (notification.style.display = 'none'), 2000);\n  };\n\n  const validators = {\n    name: (value) =>\n      value.trim().length >= 4 || 'Name must be at least 4 characters long',\n    age: (value) =>\n      (!isNaN(value) && value >= 18 && value <= 90) ||\n      'Age must be between 18 and 90',\n    position: (value) => value.trim().length > 0 || 'Position cannot be empty',\n    salary: (value) => {\n      const salary = parseFloat(value.replace(/[$,]/g, ''));\n\n      return (\n        (!isNaN(salary) && salary >= 0) || 'Salary must be a positive number'\n      );\n    },\n  };\n\n  const validateData = (inputName, value) => {\n    if (inputName === 'office') {\n      return null;\n    }\n\n    const isValid = validators[inputName](value);\n\n    return isValid === true ? null : { type: 'error', message: isValid };\n  };\n\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const formData = new FormData(form);\n\n    for (const [key, value] of formData.entries()) {\n      const validationError = validateData(key, value);\n\n      if (validationError) {\n        pushNotification(validationError.message, validationError.type);\n\n        return;\n      }\n    }\n\n    const newRow = document.createElement('tr');\n\n    formData.forEach((value, key) => {\n      const cell = document.createElement('td');\n\n      if (key === 'salary') {\n        cell.textContent = '$' + Number(value).toLocaleString('en-US');\n      } else {\n        cell.textContent = value;\n      }\n\n      newRow.appendChild(cell);\n    });\n\n    tbody.appendChild(newRow);\n    form.reset();\n\n    pushNotification('Employee added successfully', 'success');\n  });\n\n  tbody.addEventListener('dblclick', (e) => {\n    const cell = e.target;\n    const initialValue = cell.textContent.trim();\n\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    input.type = 'text';\n    input.value = initialValue;\n\n    cell.textContent = '';\n    cell.appendChild(input);\n    input.focus();\n\n    input.addEventListener('blur', () => saveChanges(input, initialValue));\n\n    input.addEventListener('keypress', (kpEvent) => {\n      if (kpEvent.key === 'Enter') {\n        saveChanges(input, initialValue);\n      }\n    });\n  });\n\n  const saveChanges = (input, initialValue) => {\n    const newValue = input.value.trim() || initialValue;\n    const cell = input.parentElement;\n\n    cell.textContent = newValue;\n    input.remove();\n  };\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}